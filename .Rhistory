## SEM calculated in original mutate above
dodge <- position_dodge(width=0.9)
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = dodge) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore, ymax = MeanImprovementScore+SEMImprovementScore),
position = dodge, width = 0.25) +
scale_fill_brewer(palette="Set1")
## Bonus: calculate SEM and add error bars
## SEM calculated in original mutate above
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore,
ymax = MeanImprovementScore+SEMImprovementScore),
position = position_dodge(width = 0.9), width = 0.25) +
scale_fill_brewer(palette="Set1")
rm(list = ls())
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1) |>
sort()
tail(d)
filtered_d = d |>
# your code here: exclude subjects that are marked as "DoNotUse"
filter(DoNotUse != 1 | is.na(DoNotUse))
# check length of new filtered data
nrow(filtered_d)
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |> # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
# your code here: remove the columns containing "Game" in the name
select(-contains("Game"))
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d |>
## your code here
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
## Your code here
IsRecall = grepl("Friends|Strangers", Measurement)
)
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d |>
group_by(ConfrontationalGame) |>
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
rating_summary_d = rating_hyp_long_d |>
## your code here
group_by(ConfrontationalGame, Emotion) |>
mutate(MeanRating = mean(Rating, na.rm=T)) |>
ungroup()
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d |>
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) |> # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) |> # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
performance_diff_summary_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore)) |>
summarize(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarise(MeanImprovementScore = mean(ImprovementScore)) |>
summarise(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
rm(list = ls())
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1) |>
sort()
tail(d)
filtered_d = d |>
# your code here: exclude subjects that are marked as "DoNotUse"
filter(DoNotUse != 1 | is.na(DoNotUse))
# check length of new filtered data
nrow(filtered_d)
filtered_d = filtered_d |>
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d |>
filter(is.na(DoNotUseVideoGamePerformanceData)) |> # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d |>
# your code here: remove the columns containing "Game" in the name
select(-contains("Game"))
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d |> pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d |>
## your code here
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Rating')
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d |>
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
## Your code here
IsRecall = grepl("Friends|Strangers", Measurement)
)
rating_hyp_long_d = rating_hyp_long_d |>
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d |>
group_by(ConfrontationalGame) |>
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d |>
group_by(ConfrontationalGame, WithMusic) |> # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) |>
ungroup()
rating_summary_d = rating_hyp_long_d |>
## your code here
group_by(ConfrontationalGame, Emotion) |>
summarize(MeanRating = mean(Rating, na.rm=T)) |>
ungroup()
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d |>
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) |> # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) |> # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
View(performance_diff_d)
?summarize
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
ungroup()
View(performance_diff_d)
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
#summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
#mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
#ungroup()
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) #|>
performance_diff_summary_d
View(performance_diff_summary_d)
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) #|>
#mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
#ungroup()
View(performance_diff_summary_d)
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
ungroup()
View9performance_diff_d
View(performance_diff_d)
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) #|>
#mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
#ungroup()
View(performance_diff_summary_d)
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) #|>
#mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
ungroup()
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
#mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
ungroup()
View(performance_diff_summary_d)
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
## Bonus: calculate SEM and add error bars
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore, na.rm=T)) |>
mutate(SEMImprovementScore = sd(ImprovementScore, na.rm=T) / sqrt(length(ImprovementScore), na.rm=T)) |>
ungroup()
## Bonus: calculate SEM and add error bars
performance_diff_summary_d = performance_diff_d %>%
## Your code here
#na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore,
ymax = MeanImprovementScore+SEMImprovementScore),
position = position_dodge(width = 0.9), width = 0.25) +
scale_fill_brewer(palette="Set1")
## Bonus: calculate SEM and add error bars
performance_diff_summary_d = performance_diff_d %>%
## Your code here
na.omit() |> ## Bonus: remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore))) |>
ungroup()
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore,
ymax = MeanImprovementScore+SEMImprovementScore),
position = position_dodge(width = 0.9), width = 0.25) +
scale_fill_brewer(palette="Set1")
performance_hyp_long_d = performance_hyp_d |>
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
View(performance_hyp_long_d)
length(performance_diff_d$ImprovementScore)
sqrt(176)
View(performance_diff_d)
performance_diff_d$ImprovementScore |> n()
?N
?n
n(performance_diff_d$ImprovementScore)
performance_diff_d$ImprovementScore |> mutate(n = n())
performance_diff_d |> mutate(abc = sd(ImprovementScore) / sqrt(n(ImprovementScore)))
performance_diff_d |> summarize(avg = mean(ImprovementScore), sd = sd(ImprovementScore), n = n(), sem = sd/sqrt(n))
performance_diff_d |> group_by(ConfrontationalGame, MusicCondition) |> summarize(avg = mean(ImprovementScore), sd = sd(ImprovementScore), n = n(), sem = sd/sqrt(n))
performance_diff_d |> na.omit() |> group_by(ConfrontationalGame, MusicCondition) |> summarize(avg = mean(ImprovementScore), sd = sd(ImprovementScore), n = n(), sem = sd/sqrt(n))
performance_diff_summary_d
## Bonus: calculate SEM and add error bars
performance_diff_summary_d = performance_diff_d |>
na.omit() |> ## remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
mutate(MeanImprovementScore = mean(ImprovementScore)) |>
mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore)))
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore,
ymax = MeanImprovementScore+SEMImprovementScore),
position = position_dodge(width = 0.9), width = 0.25) +
scale_fill_brewer(palette="Set1")
performance_diff_summary_d
performance_diff_d |> na.omit() |> group_by(ConfrontationalGame, MusicCondition) |> summarize(avg = mean(ImprovementScore), sd = sd(ImprovementScore), n = n(), sem = sd/sqrt(n))
## Bonus: calculate SEM and add error bars
performance_diff_summary_d = performance_diff_d |>
na.omit() |> ## remove NA's before grouping/averaging (omit beforehand to account for mean, sd, and sqrt functions)
group_by(ConfrontationalGame, MusicCondition) |>
summarize(MeanImprovementScore = mean(ImprovementScore),
sd = sd(ImprovementScore),
n = n(),
SEMImprovementScore = sd/sqrt(n))
#mutate(MeanImprovementScore = mean(ImprovementScore)) |>
#mutate(SEMImprovementScore = sd(ImprovementScore) / sqrt(length(ImprovementScore)))
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
geom_col(position = position_dodge(width = 0.9)) +
geom_errorbar(aes(ymin = MeanImprovementScore-SEMImprovementScore,
ymax = MeanImprovementScore+SEMImprovementScore),
position = position_dodge(width = 0.9), width = 0.25) +
scale_fill_brewer(palette="Set1")
n_sims <- 10000
ds_replicates <- replicate(n = n_sims,
expr = double.sample(),
simplify = TRUE)
double.sample <- function(n_participants = 30, p_lower = .05, p_upper = .25) {
## get random draw of data from normal distribution
sampled_data <- rnorm(n = n_participants)
## obtain p-value for two-sided test for difference from value of 0
p_val <- t.test(sampled_data)$p.value
## compare p-value against lower/upper bound to determine if additional data
##  collection should occur
if(p_val < p_upper & p_val > p_lower) {
sampled_data <- c(sampled_data, rnorm(n = n_participants))
p_val <- t.test(sampled_data)$p.value
} else if(p_val > p_upper | p_val < p_lower) {
## if p-value is < .05 or > upper bound, then don't add additional data
p_val <- p_val
}
return(p_val)
}
n_sims <- 10000
ds_replicates <- replicate(n = n_sims,
expr = double.sample(),
simplify = TRUE)
## get proportion of p-values
prop_ds_reps_p <- sum(ds_replicates < .05) / n_sims
prop_ds_reps_p
## visualize distribution with simple plot
hist(ds_replicates, xlab = "p-values", main = "")
abline(v = .05, col = "red", lty = 2, lwd = 3) ## alpha value of .05
abline(v = prop_ds_reps_p, col = "blue", lwd = 2) ## computed false positive rate
t.test(ds_replicates, alternative = "less", mu = .05)
## change global condition names to remove underscore
fvs <- gsub(fvs, "\\_", " ")
fvs <- read_csv("data/FVS2011-hands.csv")
library(tidyverse)
fvs <- read_csv("data/FVS2011-hands.csv")
## change global condition names to remove underscore
fvs <- gsub(fvs, "\\_", " ")
## remove repeated measures to get info about each participant once
fvs_indv <- fvs |>
select(subid, age) |>
group_by(subid) |>
unique()
head(fvs)
## change global condition names to remove underscore
fvs <- gsub(fvs$condition, "\\_", " ")
head(fvs)
fvs <- read_csv("data/FVS2011-hands.csv")
## change global condition names to remove underscore
fvs$condition <- gsub(fvs$condition, "\\_", " ")
fvs
fvs <- read_csv("data/FVS2011-hands.csv")
fvs
## change global condition names to remove underscore
fvs <- fvs |>
mutate(condition = str_replace(condition, "\\_", " "))
head(fvs)
## change global condition names to remove underscore
fvs <- fvs |>
mutate(condition = str_replace(condition, "\\_", " "))
## remove repeated measures to get info about each participant once
fvs_indv <- fvs |>
select(subid, age) |>
group_by(subid) |>
unique()
## individually:
##  take unique data set and plot each participant individually (and only once)
ggplot(fvs_indv, aes(age)) +
geom_histogram(position = "dodge") +
xlab("Age (Months)") +
ylab("# of Participants") +
xlim(c(floor(min(fvs_indv$age)), ceiling(max(fvs_indv$age)))) +
scale_x_continuous(breaks = floor(min(fvs_indv$age)):ceiling(max(fvs_indv$age))) +
scale_color_grey() +
scale_fill_grey() +
theme_classic()
## to validate: plot all together:
##  facet plot by condition to separate out repeated measures
##  ...slight deviations in frequencies between conditions indicative of missing/excluded data
ggplot(fvs, aes(age, fill = condition)) +
facet_grid(condition ~ .) +
geom_histogram(position = "dodge") +
xlab("Age (Months)") +
ylab("# of Participants") +
xlim(c(floor(min(fvs$age)), ceiling(max(fvs$age)))) +
scale_x_continuous(breaks = floor(min(fvs$age)):ceiling(max(fvs$age))) +
scale_color_grey() +
scale_fill_grey() +
theme_classic() +
theme(legend.position = "top")
## change global condition names to remove underscore
fvs <- fvs |>
mutate(Condition = str_replace(condition, "\\_", " "))
head(fvs)
## change global condition names to remove underscore
fvs <- fvs |>
mutate(Condition = str_replace(condition, "\\_", " "), .after = age) |>
select(-condition)
head(fvs)
fvs <- read_csv("data/FVS2011-hands.csv")
## change global condition names to remove underscore
fvs <- fvs |>
mutate(Condition = str_replace(condition, "\\_", " "), .after = age) |>
select(-condition)
head(fvs)
## change global condition names to remove underscore
fvs <- fvs |>
mutate(condition = str_replace(condition, "\\_", " ")) |>
mutate(condition = tolower(condition))
fvs <- read_csv("data/FVS2011-hands.csv")
## change global condition names to remove underscore
fvs <- fvs |>
mutate(condition = str_replace(condition, "\\_", " ")) |>
mutate(condition = tolower(condition))
head(fvs)
