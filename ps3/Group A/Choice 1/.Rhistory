paste0(dv, "_r", type),
by = "plev",
data = data)
return(estimated_means)
}
get_adj_means(fit2)
get_adj_means(fit2, "pitch", "mean")
get_adj_means(fit2, "pitch", "mean") -> abc
abc
colnames(d_subset)
pitch_mean_model <- get_model("pitch", "mean")
### create helper function to facilitate analysis
get_model <- function(dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamic function to build out model based on dv
fit <- lm(formula = eval(parse(text = paste0(dv, "_s", type))) ~ plev*vsex +
eval(parse(text = paste0(dv, "_r", type))),
data = data)
return(fit)
}
pitch_mean_model <- get_model("pitch", "mean")
pitch_mean_model
pitch_mean_ancova <- run_ancova(pitch_mean_model)
pitch_mean_ancova
pitch_mean_adjmeans
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
emmeans::emmeans(fit,
paste0(dv, "_r", type),
by = "plev",
data = data)
emmeans::emmeans(pitch_mean_model,
paste0(dv, "_r", type),
by = "plev",
data = data)
pitch_mean_model <- get_model("pitch", "mean")
pitch_mean_model
pitch_mean_ancova <- run_ancova(pitch_mean_model)
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_adjmeans <- get_adj_means(pitch_mean_ancova, "pitch", "mean")
emmeans(fit2, paste0(dv, "_r", type), by = "plev")
fit2
pitch_mean_model
get_adj_means <- function(fit,
dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamically construct estimated marginal means formula based on dv
estimated_means <- emmeans::emmeans(fit,
eval(parse(text = paste0(dv, "_r", type))),
by = "plev",
data = data)
return(estimated_means)
}
emmeans(fit2, paste0(dv, "_r", type), by = "plev")
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_model
### create helper function to facilitate analysis
get_model <- function(dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamic function to build out model based on dv
fit <- lm(formula = as.formula(paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+")), data = data)
return(fit)
}
abc <- get_model("pitch", "mean")
as.formula(paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+"))
as.formula(paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+"))
as.formula(paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+"))
paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+")
paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex", collapse = "+"))
paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"), collapse = "+")
paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "plev*vsex"))
paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "+", "plev*vsex"))
### create helper function to facilitate analysis
get_model <- function(dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamic function to build out model based on dv
fit <- lm(formula = as.formula(paste(paste0(dv, "_s", type), "~", paste(paste0(dv, "_r", type), "+", "plev*vsex"))),
data = data)
return(fit)
}
abc <- get_model("pitch", "mean")
abc
summary(abc <- get_model("pitch", "mean"))
### create helper function to facilitate analysis
get_model <- function(dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamic function to build out model based on dv
fit <- lm(formula = as.formula(
paste(paste0(dv, "_s", type), "~",
paste(paste0(dv, "_r", type), "+", "plev*vsex"))),
data = data)
return(fit)
}
run_ancova <- function(fit)
{
## run ANCOVA
ancova <- car::Anova(fit, type = "III")
return(ancova)
}
get_adj_means <- function(fit,
dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamically construct estimated marginal means formula based on dv
estimated_means <- emmeans::emmeans(fit,
eval(parse(text = paste0(dv, "_r", type))),
by = "plev",
data = data)
return(estimated_means)
}
get_es <- function(ancova)
{
return(effectsize::eta_squared(ancova, partial = TRUE))
}
pitch_mean_model <- get_model("pitch", "mean")
pitch_mean_ancova <- run_ancova(pitch_mean_model)
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_model
get_adj_means <- function(fit,
dv = c("pitch", "loudness", "resonance"),
type = c("mean", "var"),
data = d_subset)
{
## dynamically construct estimated marginal means formula based on dv
estimated_means <- emmeans::emmeans(fit,
paste0(dv, "_r", type),
by = "plev",
data = data)
return(estimated_means)
}
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_adjmeans
pitch_mean_es <- get_es(pitch_mean_ancova)
pitch_mean_es
## pitch variability
pitch_var_model <- get_model("pitch", "var")
ptich_var_ancova <- run_ancova(pitch_var_model)
pitch_var_adjmeans <- get_adj_means(pitch_var_model, "pitch", "var")
pitch_var_es <- get_es(pitch_var_ancova)
pitch_var_es <- get_es(ptich_var_ancova)
## pitch variability
pitch_var_model <- get_model("pitch", "var")
pitch_var_ancova <- run_ancova(pitch_var_model)
pitch_var_adjmeans <- get_adj_means(pitch_var_model, "pitch", "var")
pitch_var_es <- get_es(pitch_var_ancova)
pitch_var_es
## loudness
loudness_mean_model <- get_model("loudness", "mean")
colnames(d_subset)
colnames(d)
## grab relevant columns
d_subset <- d |>
select(voice, plev, vsex,
starts_with("pitch"),
starts_with("intense"),
starts_with("form"))
get_adj_means <- function(fit,
dv = c("pitch", "intense", "form"),
type = c("mean", "var"),
data = d_subset)
{
## dynamically construct estimated marginal means formula based on dv
estimated_means <- emmeans::emmeans(fit,
paste0(dv, "_r", type),
by = "plev",
data = data)
return(estimated_means)
}
### create helper function to facilitate analysis
get_model <- function(dv = c("pitch", "intense", "form"),
type = c("mean", "var"),
data = d_subset)
{
## dynamic function to build out model based on dv
fit <- lm(formula = as.formula(
paste(paste0(dv, "_s", type), "~",
paste(paste0(dv, "_r", type), "+", "plev*vsex"))),
data = data)
return(fit)
}
## loudness
loudness_mean_model <- get_model("loudness", "mean")
## loudness
loudness_mean_model <- get_model("intense", "mean")
loudness_mean_model
loudness_mean_ancova <- run_ancova(loudness_mean_model)
loudness_mean_adjmeans <- get_adj_means(loudness_mean_model, "loudness", "mean")
loudness_mean_adjmeans <- get_adj_means(loudness_mean_model, "intense", "mean")
loudness_mean_es <- get_es(loudness_mean_ancova)
## loudness variability
loudness_var_model <- get_model("intense", "var")
loudness_var_ancova <- run_ancova(loudness_var_model)
loudness_var_adjmeans <- get_adj_means(loudness_var_model, "intense", "var")
loudness_var_es <- get_es(loudness_var_ancova)
## resonance
resonance_mean_model <- get_model("form", "mean")
resonance_mean_ancova <- run_ancova(resonance_mean_model)
resonance_mean_adjmeans <- get_adj_means(resonance_mean_model, "form", "mean")
resonance_mean_es <- get_es(resonance_mean_ancova)
## resonance variability
resonance_var_model <- get_model("form", "var")
resonance_var_ancova <- run_ancova(resonance_var_model)
resonance_var_adjmeans <- get_adj_means(resonance_var_model, "form", "var")
resonance_var_es <- get_es(resonance_var_ancova)
resonance_var_es$Eta2_partial
resonance_var_es
pitch_mean_es
loudness_mean_es
loudness_mean_es$Eta2_partial[2]
round(loudness_mean_es$Eta2_partial[2], 2)
resonance_var_adjmeans
resonance_var_adjmeans[1]
resonance_var_adjmeans[1][1]
resonance_var_adjmeans[[1]]
resonance_var_adjmeans[1]
resonance_var_adjmeans[2]
summary(resonance_var_adjmeans)
summary(resonance_var_adjmeans)$emmmean
summary(resonance_var_adjmeans)$emmean
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(summary(adj_means)$emmean)[1]
} else if(rank == "high")
{
return(summary(adj_means)$emmean)[2]
} else {
return(error("Invalid rank specified... please use 'low' or 'high' options!"))
}
}
get_adj_means_by_rank(pitch_mean_adjmeans, "low")
summary(resonance_var_adjmeans)$emmean[1]
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(summary(adj_means))$emmean[1]
} else if(rank == "high")
{
return(summary(adj_means))$emmean[2]
} else {
return(error("Invalid rank specified... please use 'low' or 'high' options!"))
}
}
get_adj_means_by_rank(pitch_mean_adjmeans, "low")
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(summary(adj_means))$emmean[1])
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(summary(adj_means)$emmean[1])
} else if(rank == "high")
{
return(summary(adj_means)$emmean[2])
} else {
return(error("Invalid rank specified... please use 'low' or 'high' options!"))
}
}
summary(pitch_mean_adjmeans)
summary(pitch_mean_adjmeans)$emmean
summary(pitch_mean_adjmeans)$emmean[1]
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(summary(adj_means)$emmean[1])
} else if(rank == "high")
{
return(summary(adj_means)$emmean[2])
} else {
return(error("Invalid rank specified... please use 'low' or 'high' options!"))
}
}
get_adj_means_by_rank(pitch_mean_adjmeans, "low")
get_adj_means_by_rank(pitch_mean_adjmeans, "high")
get_adj_means_by_rank <- function(adj_means, rank = c("low", "high"))
{
if(rank == "low")
{
return(round(summary(adj_means)$emmean[1], 2))
} else if(rank == "high")
{
return(round(summary(adj_means)$emmean[2], 2))
} else {
return(error("Invalid rank specified... please use 'low' or 'high' options!"))
}
}
get_adj_means_by_rank(pitch_mean_adjmeans, "low")
get_es <- function(ancova)
{
es <- effectsize::eta_squared(ancova, partial = TRUE)
return(round(es$Eta2_partial[2]), 2)
}
## pitch mean
pitch_mean_model <- get_model("pitch", "mean")
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_es <- get_es(pitch_mean_ancova)
get_es <- function(ancova)
{
es <- effectsize::eta_squared(ancova, partial = TRUE)
return(es)
return(round(es$Eta2_partial[2]), 2)
}
pitch_mean_es <- get_es(pitch_mean_ancova)
pitch_mean_es
get_es <- function(ancova)
{
es <- effectsize::eta_squared(ancova, partial = TRUE)
return(es$Eta2_partial[2])
}
pitch_mean_es <- get_es(pitch_mean_ancova)
pitch_mean_es
get_es <- function(ancova)
{
es <- effectsize::eta_squared(ancova, partial = TRUE)
return(round(es$Eta2_partial[2]), 2)
}
get_es(pitch_mean_ancova)
get_es <- function(ancova)
{
es <- effectsize::eta_squared(ancova, partial = TRUE)
es_rounded <- round(es$Eta2_partial[2], 2)
return(es_rounded)
}
get_es(pitch_mean_ancova)
get_es <- function(ancova)
{
es <- suppressWarnings(effectsize::eta_squared(ancova, partial = TRUE))
es_rounded <- round(es$Eta2_partial[2], 2)
return(es_rounded)
}
get_es(pitch_mean_ancova)
get_es <- function(ancova)
{
es <- suppressMessages(effectsize::eta_squared(ancova, partial = TRUE))
es_rounded <- round(es$Eta2_partial[2], 2)
return(es_rounded)
}
get_es(pitch_mean_ancova)
get_es <- function(ancova)
{
## calculate effect size and suppress type 3 anova message that eta_squared returns
##  (to make the output pretty!)
es <- suppressMessages(effectsize::eta_squared(ancova, partial = TRUE))
es_rounded <- round(es$Eta2_partial[2], 2)
return(es_rounded)
}
get_es <- function(ancova)
{
## calculate effect size and suppress type 3 anova message that eta_squared returns
##  (to make the output pretty!)
es <- suppressMessages(effectsize::eta_squared(ancova, partial = TRUE))
es_rounded <- round(es$Eta2_partial[2], 2) ## round result to 2 significant figures to match paper's output in table 4
return(es_rounded)
}
## pitch mean
pitch_mean_model <- get_model("pitch", "mean")
pitch_mean_ancova <- run_ancova(pitch_mean_model)
pitch_mean_adjmeans <- get_adj_means(pitch_mean_model, "pitch", "mean")
pitch_mean_es <- get_es(pitch_mean_ancova)
## pitch variability
pitch_var_model <- get_model("pitch", "var")
pitch_var_ancova <- run_ancova(pitch_var_model)
pitch_var_adjmeans <- get_adj_means(pitch_var_model, "pitch", "var")
pitch_var_es <- get_es(pitch_var_ancova)
## loudness
loudness_mean_model <- get_model("intense", "mean")
loudness_mean_ancova <- run_ancova(loudness_mean_model)
loudness_mean_adjmeans <- get_adj_means(loudness_mean_model, "intense", "mean")
loudness_mean_es <- get_es(loudness_mean_ancova)
## loudness variability
loudness_var_model <- get_model("intense", "var")
loudness_var_ancova <- run_ancova(loudness_var_model)
loudness_var_adjmeans <- get_adj_means(loudness_var_model, "intense", "var")
loudness_var_es <- get_es(loudness_var_ancova)
## resonance
resonance_mean_model <- get_model("form", "mean")
resonance_mean_ancova <- run_ancova(resonance_mean_model)
resonance_mean_adjmeans <- get_adj_means(resonance_mean_model, "form", "mean")
resonance_mean_es <- get_es(resonance_mean_ancova)
## resonance variability
resonance_var_model <- get_model("form", "var")
resonance_var_ancova <- run_ancova(resonance_var_model)
resonance_var_adjmeans <- get_adj_means(resonance_var_model, "form", "var")
resonance_var_es <- get_es(resonance_var_ancova)
## adjusted means (high-rank condition)
get_adj_means_by_rank(pitch_mean_adjmeans, "high")
## adjusted means (low-rank condition)
get_adj_means_by_rank(pitch_mean_adjmeans, "low")
## effect size
pitch_mean_es
Acoustic_cue <- c("Pitch", "Pitch Variability", "Loudness", "Loudness Variability",
"Resonance", "Resonance Variability")
High_rank_condition <- c(get_adj_means_by_rank(pitch_mean_adjmeans, "high"),
get_adj_means_by_rank(pitch_var_adjmeans, "high"),
get_adj_means_by_rank(loudness_mean_adjmeans, "high"),
get_adj_means_by_rank(loudness_var_adjmeans, "high"),
get_adj_means_by_rank(resonance_mean_adjmeans, "high"),
get_adj_means_by_rank(resonance_var_adjmeans, "high"))
Low_rank_condition <- c(get_adj_means_by_rank(pitch_mean_adjmeans, "low"),
get_adj_means_by_rank(pitch_var_adjmeans, "low"),
get_adj_means_by_rank(loudness_mean_adjmeans, "low"),
get_adj_means_by_rank(loudness_var_adjmeans, "low"),
get_adj_means_by_rank(resonance_mean_adjmeans, "low"),
get_adj_means_by_rank(resonance_var_adjmeans, "low"))
Effect_of_condition <- c(pitch_mean_es, pitch_var_es,
loudness_mean_es, loudness_var_es,
resonance_mean_es, resonance_var_es)
table4_reconstruction <- data.frame("Acoustic cue" = Acoustic_cue,
"High-rank condition" = High_rank_condition,
"Low-rank condition" = Low_rank_condition,
"Effect of condition" = Effect_of_condition)
DT::datatable(table4_reconstruction)
# reproduce the above results here
summary(pitch_mean_ancova)
# reproduce the above results here
pitch_mean_ancova
# reproduce the above results here
pitch_mean_ancova$`F value`
# reproduce the above results here
pitch_mean_ancova
# reproduce the above results here
pitch_mean_ancova[1]
# reproduce the above results here
pitch_mean_ancova[,1]
# reproduce the above results here
pitch_mean_ancova
# reproduce the above results here
pitch_mean_ancova[,3]
# reproduce the above results here
round(pitch_mean_ancova[,3], 2)
pitch_mean_ancova
# reproduce the above results here
round(pitch_mean_ancova[,3], 5)
pitch_mean_ancova[,3]
pitch_mean_ancova
pitch_mean_ancova[,1]
pitch_mean_ancova[1,]
# reproduce the above results here
round(pitch_mean_ancova[3,], 2)
# reproduce the above results here
round(pitch_mean_ancova[3,])
# reproduce the above results here
pitch_mean_ancova[3,]
pitch_mean_ancova
pitch_mean_ancova[3,]
pitch_mean_ancova[3,1]
pitch_mean_ancova[3,]
reconstruct_ancova_results <- function(ancova)
{
df_1 <- ancova[3,2]
df_2 <- ancova[5,2]
F_stat <- ancova[3,3]
p_stat <- ancova[3,4]
results_string <- paste0("F(", df_1, ", ", df_2, ") = ", round(F_stat, 2), " p = ", round(p_stat, 3))
return(results_string)
}
reconstruct_ancova_results(pitch_mean_ancova)
pitch_mean_ancova
reconstruct_ancova_results <- function(ancova)
{
df_1 <- ancova[3,2]
df_2 <- ancova[6,2]
F_stat <- ancova[3,3]
p_stat <- ancova[3,4]
results_string <- paste0("F(", df_1, ", ", df_2, ") = ", round(F_stat, 2), " p = ", round(p_stat, 3))
return(results_string)
}
reconstruct_ancova_results(pitch_mean_ancova)
## pitch mean
reconstruct_ancova_results(pitch_mean_ancova)
## pitch variability
reconstruct_ancova_results(pitch_var_ancova)
## loudness
reconstruct_ancova_results(loudness_mean_ancova)
## loudness variability
reconstruct_ancova_results(loudness_var_ancova)
## resonance
reconstruct_ancova_results(resonance_mean_ancova)
## resonance variability
reconstruct_ancova_results(resonance_var_ancova)
## pitch mean
reconstruct_ancova_results(pitch_mean_ancova)
## loudness
reconstruct_ancova_results(loudness_mean_ancova)
## loudness variability
reconstruct_ancova_results(loudness_var_ancova)
## pitch variability
reconstruct_ancova_results(pitch_var_ancova)
## loudness variability
reconstruct_ancova_results(loudness_var_ancova)
## resonance
reconstruct_ancova_results(resonance_mean_ancova)
## resonance variability
reconstruct_ancova_results(resonance_var_ancova)
## resonance variability
reconstruct_ancova_results(resonance_var_ancova)
